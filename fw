#!/bin/bash

# Shows the SDK version and required firmware of one or multiple PS4 PKG files.
# Requires Bash script "sfo" (https://github.com/hippie68/sfo) in $PATH.

# If you have renamed "sfo", enter the correct name here:
sfo_script_name=sfo

# Script starts here ##########################################################

show_usage() {
  echo "Usage: ${0##*/} [options] [file|directory ...]" >&2
}

show_help() {
  show_usage 2>&1
  echo "
  Shows both firmware and SDK versions of PS4 PKGs.
  If no files or directories are specified, the current directory will be used.

  Options:
    -h  Display this help info
    -r  Traverse directories recursively"
  exit
}

# Default options
find_option="-maxdepth 1"

# Parse command line options
while [[ $1 == "-"?* ]]; do
  for ((i=1;i<${#1};i++)); do
    case ${1:$i:1} in
      h) show_help ;;
      r) find_option= ;;
      *) show_usage; exit 1 ;;
    esac
  done
  shift
done

# Use current directory if no arguments provided
[[ $* == "" ]] && set -- .

# Accepts a PKG file name and returns its firmware version
show_firmware() {
  local line sdk_ver system_ver
  while read -r line; do
    case $line in
      PUBTOOLINFO*)
        if [[ $line =~ sdk_ver=([0-9][0-9])([0-9][0-9]) ]]; then
          sdk_ver=${BASH_REMATCH[1]#0}.${BASH_REMATCH[2]}
        fi
        ;;
      SYSTEM_VER*)
        if [[ $line =~ 0x([0-9][0-9])([0-9][0-9]) ]]; then
          system_ver=${BASH_REMATCH[1]#0}.${BASH_REMATCH[2]}
        fi
        ;;
    esac
  done < <("$sfo_script_name" "$1")
  echo -e "$sdk_ver\\t$system_ver\\t${1##*/}"
}

# Collect list of PKG files
for arg in "$@"; do
  if [[ -d "$arg" ]]; then
    while read -r file; do
      pkgfiles+=("$file")
    done < <(find "$arg" $find_option -type f -iname '*.pkg' | sort)
  elif [[ -f "$arg" ]]; then
    pkgfiles+=("$arg")
  else
    echo -e "ERROR:\\t File not found: $arg" >&2
  fi
done

# Run firmware check on that list
if [[ ${pkgfiles[*]} != "" ]]; then
  echo -e "SDK:\\tFW:\\tFile name:"
  for file in "${pkgfiles[@]}"; do
    show_firmware "$file"
  done
fi
